import { ActionChainEmitter } from './ActionChainEmitter'
import { Mutation } from 'proxy-state-tree'

const IS_DEVELOPMENT = process.env.NODE_ENV !== 'production'

export type ExecutionContext = {
  __execution: Execution
  __path: string[]
}

export type ActionChainOptions = {
  actionWrapper?: any
  providerExceptions?: string[]
}

export type ActionExecution = {
  actionId: number
  executionId: number
}

export type OperatorExecution = ActionExecution & {
  operatorId: number
  type: string
  name: string
  path: string
}

export type Execution = ActionExecution & OperatorExecution

export interface ActionChainEvents {
  provider: Execution & {
    name: string
    method: string | number | symbol
    result: any
  }
  'action:start': ActionExecution
  'action:end': ActionExecution
  'operator:start': OperatorExecution
  'operator:async': OperatorExecution & {
    isAsync: boolean
  }
  'operator:end': OperatorExecution & {
    isAsync: boolean
    result: any
  }
  mutations: ActionExecution & {
    mutations: Mutation[]
  }
}

export class ActionChain<Context> extends ActionChainEmitter<
  ActionChainEvents
> {
  constructor(
    private context: Context,
    private options: ActionChainOptions = {}
  ) {
    super()
    this.options.providerExceptions = options.providerExceptions || []
  }

  getContext(executionContext: ExecutionContext) {
    const instance = this
    const providers = Object.keys(this.context).reduce(
      (currentContext, key) => {
        if (
          IS_DEVELOPMENT &&
          this.options.providerExceptions.indexOf(key) === -1
        ) {
          currentContext[key] = new Proxy(this.context[key], {
            get(target, prop) {
              if (typeof target[prop] === 'function') {
                return (...args) => {
                  const result = target[prop](...args)
                  if (result instanceof Promise) {
                    result.then((promisedResult) => {
                      instance.emit('provider', {
                        ...executionContext.__execution,
                        name: key,
                        method: prop,
                        result: promisedResult,
                      })
                    })
                  } else {
                    instance.emit('provider', {
                      ...executionContext.__execution,
                      name: key,
                      method: prop,
                      result,
                    })
                  }

                  return result
                }
              }

              return target[prop]
            },
          })
        } else {
          currentContext[key] = this.context[key]
        }

        return currentContext
      },
      {}
    )
    return { ...providers, ...executionContext }
  }
}
