const WebSocketServer = require('ws').Server

class ConnectionManager {
  constructor(mainWindow) {
    this.mainWindow = mainWindow
    this.clients = {}

    this.onDevtoolsMessage = this.onDevtoolsMessage.bind(this)
    this.onAddPort = this.onAddPort.bind(this)
    this.onRemovePort = this.onRemovePort.bind(this)
  }
  addClient(port, client) {
    const onConnection = this.onConnection.bind(this, port)
    const onError = this.onError.bind(this, port)

    this.clients[port] = {
      wss: client,
      dispose() {
        client.removeListener('connection', onConnection)
        client.removeListener('error', onError)
        client.close()
      },
    }

    this.clients[port].wss.on('connection', onConnection)
    this.clients[port].wss.on('error', onError)
    this.mainWindow.webContents.send('port:added', port)
  }
  onError(port) {
    this.mainWindow.webContents.send('port:exists', port)
  }
  onConnection(port, ws) {
    this.clients[port].ws = ws
    ws.on('message', this.onAppMessage.bind(this, port))
  }
  onAppMessage(port, message) {
    const parsedMessage = JSON.parse(message)
    this.mainWindow.webContents.send('message', {
      port,
      message: parsedMessage,
    })
  }
  onDevtoolsMessage(_, payload) {
    if (!this.clients[payload.port] || !this.clients[payload.port].ws) {
      return
    }

    this.clients[payload.port].ws.send(JSON.stringify(payload))
  }
  onAddPort(_, port) {
    if (this.clients[port]) {
      this.mainWindow.webContents.send('port:added', port)
      return
    }

    this.addClient(port, new WebSocketServer({ port: Number(port) }))
  }
  onRemovePort(_, port) {
    this.clients[port].dispose()

    delete this.clients[port]
  }
}

module.exports = ConnectionManager
