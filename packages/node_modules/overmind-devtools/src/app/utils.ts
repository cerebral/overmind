import * as ColorHash from 'color-hash'
import { App } from './state'

export const runMutation = (state) => (mutation) => {
  const pathArray = mutation.path.split('.')
  const key = pathArray.pop()
  const target = pathArray.reduce((current, pathKey) => current[pathKey], state)

  switch (mutation.method) {
    case 'set':
      target[key] = mutation.args[0]
      break
    case 'unset':
      delete target[key]
      break
    default:
      target[key][mutation.method](...mutation.args)
  }
}

export const getActionId = (details: {
  actionId: number
  executionId: number
}) => `${details.actionId}_${details.executionId}`

export const getOperatorId = (details: {
  actionId: number
  executionId: number
  operatorId: number
}) => `${getActionId(details)}_${details.operatorId}`

export const createApp = (data: Partial<App>): App =>
  Object.assign(
    {
      name: null,
      port: null,
      messages: [],
      state: {},
      components: {},
      derived: {},
      computed: {},
      flushes: {},
      actions: {},
      actionsList: [],
      currentActionId: null,
      flushByActionId: {},
      flushByOperatorId: {},
    },
    data
  )

export const nameToColor = (name, lightness = 0.5, saturation = 0.5) => {
  let colorHash = new ColorHash({
    saturation: saturation,
    lightness: lightness,
  })

  return colorHash.hex(name)
}

export const ensureFlushExists = (flushes, flushId) => {
  if (!flushes[flushId]) {
    flushes[flushId] = {
      flushId,
      mutations: [],
      components: [],
      derived: [],
      computed: [],
    }
  }
}
