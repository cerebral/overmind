import { derived } from 'overmind'
import { State, Component } from './state'

export const currentApp = derived(
  (state: State) => state.apps[state.currentPort]
)

export const componentsMounted = derived((state: State) =>
  Object.keys(state.currentApp.components).reduce(
    (aggr, key) => {
      if (state.currentApp.components[key].isMounted) {
        return aggr.concat(state.currentApp.components[key])
      }

      return aggr
    },
    [] as Component[]
  )
)

export const componentsUpdateCount = derived((state: State) =>
  state.componentsMounted.reduce(
    (aggr, component) => aggr + component.updateCount,
    0
  )
)

export const componentsStatePathCount = derived((state: State) =>
  state.componentsMounted.reduce(
    (aggr, component) => aggr + component.paths.length,
    0
  )
)

export const flushes = derived((state: State) =>
  state.currentApp.flushes.slice(1).reverse()
)

export const flushesMutationsCount = derived((state: State) =>
  state.flushes.reduce((aggr, flush) => aggr + flush.mutations.length, 0)
)

export const flushesStatePathCount = derived(
  (state: State) =>
    state.flushes.reduce((aggr, flush) => {
      return flush.mutations.reduce(
        (aggr, mutation) =>
          aggr.includes(mutation.path) ? aggr : aggr.concat(mutation.path),
        aggr
      )
    }, []).length
)
