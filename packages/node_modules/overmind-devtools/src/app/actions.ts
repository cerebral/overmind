import { Action } from './'
import * as mutations from './mutations'
import * as helpers from './helpers'
import { Message } from './state'

export default (action: Action) => {
  const onMessage = action<Message>()
    .mutation(mutations.addMessagesFromClient)
    .mutation(mutations.performMutationsByMessageType)

  const loadDevtools = action()
    // .do((_, { storage }) => storage.clear())
    .map(helpers.getAppsFromStorage)
    .mutation(mutations.setApps)
    .map(helpers.getCurrentPortFromStorage)
    .mutation(mutations.setCurrentPort)
    .mutation(mutations.setAppLoaded)
    .map(helpers.connectCurrentPort(onMessage))

  const setError = action<string>().mutation(mutations.setError)

  const changeNewPortValue = action<string>()
    .map(helpers.toNumber)
    .mutation(mutations.setNewPortValue)

  const addPort = action()
    .map(helpers.getNewPortFromState)
    .mutation(mutations.setCurrentPort)
    .mutation(mutations.addNewApp)
    .mutation(mutations.resetNewPortValue)
    .do(helpers.storeApps)

  const openState = action().mutation(mutations.openState)

  const openConsole = action().mutation(mutations.openConsole)

  const openComponents = action().mutation(mutations.openComponents)

  const openFlushes = action().mutation(mutations.openFlushes)

  const openApp = action<string>()

  const toggleExpandState = action<string[]>().mutation(
    mutations.toggleExpandStatePath
  )

  return {
    loadDevtools,
    setError,
    changeNewPortValue,
    addPort,
    openState,
    openConsole,
    openComponents,
    openFlushes,
    openApp,
    toggleExpandState,
  }
}
