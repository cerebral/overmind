import { Action } from './'
import * as mutations from './mutations'
import * as helpers from './helpers'
import { Message, Tab } from './state'

export default (action: Action) => {
  const onMessage = action<Message>()
    .mutation(mutations.performMutationsByMessageType)
    .mutation(mutations.addMessagesFromClient)

  return {
    loadDevtools: action()
      // .do(({ storage }) => storage.clear())
      // Do a check if the current app matches the keys of the ???
      .map(helpers.getAppsFromStorage)
      .mutation(mutations.setApps)
      .map(helpers.getCurrentPortFromStorage)
      .mutation(mutations.setCurrentPort)
      .mutation(mutations.setAppLoaded)
      .do(helpers.connectCurrentPort(onMessage)),

    setError: action<string>().mutation(mutations.setError),

    changeNewPortValue: action<string>()
      .map(helpers.toNumber)
      .mutation(mutations.setNewPortValue),

    addPort: action()
      .map(helpers.getNewPortFromState)
      .mutation(mutations.setCurrentPort)
      .mutation(mutations.addNewApp)
      .mutation(mutations.resetNewPortValue)
      .do(helpers.storeApps)
      .do(helpers.connectCurrentPort(onMessage)),

    changeTab: action<Tab>().mutation(mutations.changeTab),

    toggleExpandState: action<string[]>().mutation(
      mutations.toggleExpandStatePath
    ),

    selectAction: action<string>()
      .mutation(mutations.toggleActionItemCollapse)
      .mutation(mutations.selectAction),

    toggleCollapsed: action<{ isCollapsed: boolean }>().mutation(
      mutations.toggleCollapsed
    ),

    configurePort: action().mutation(mutations.configurePort),

    cancelConfigurePort: action().mutation(mutations.cancelConfigurePort),

    removeApp: action()
      .filter(helpers.confirm('Are you sure you want to remove the app?'))
      .do(helpers.removeCurrentPort)
      .mutation(mutations.removeApp)
      .do(helpers.storeApps)
      .do(helpers.connectCurrentPort(onMessage)),

    selectPort: action<string>()
      .mutation(mutations.selectPort)
      .do(helpers.connectCurrentPort(onMessage)),
  }
}
