import * as React from 'react'
import { connect, Connect } from '../../app'
import { Operator as OperatorType } from '../../app/state'
import ValueInspector from '../ValueInspector'
import Text from '../common/Text'
import Icon from '../common/Icon'
import Path from '../ActionPath'
import { Pipe } from '../Action/elements'
import { Operator, OperatorHeader, OperatorItem } from './elements'

type Props = {
  operator: OperatorType
  value: any
} & Connect

const ActionOperator: React.SFC<Props> = ({ operator, value, app }) => (
  <React.Fragment key={operator.operatorId}>
    <Pipe>
      <Path />
      <ValueInspector value={value} small />
    </Pipe>
    <Pipe>
      <Path
        borderColor={operator.type === 'mutation' ? 'primary' : 'secondary'}
      >
        {operator.path.length ? (
          <Text variant="hint">
            <b>{operator.path.join('.')}</b>
          </Text>
        ) : null}
      </Path>
      <Operator
        borderColor={operator.type === 'mutation' ? 'primary' : 'secondary'}
        onClick={
          operator.mutations.length || operator.effects.length
            ? () => app.actions.toggleCollapsed(operator)
            : null
        }
      >
        <OperatorHeader>
          <Text
            variant="text"
            color={operator.type === 'mutation' ? 'primary' : 'secondary'}
            dense
          >
            {operator.type}
          </Text>
          <Text variant="text" dense>
            {operator.name}
          </Text>
          {operator.mutations.length || operator.effects.length ? (
            <Text variant="hint">
              {operator.isCollapsed ? (
                <Icon>chevron-up</Icon>
              ) : (
                <Icon>chevron-down</Icon>
              )}
            </Text>
          ) : null}
        </OperatorHeader>
        {operator.isCollapsed ? null : (
          <div onClick={(event) => event.stopPropagation()}>
            {operator.effects.map((effect, index) => (
              <OperatorItem key={index}>
                <Text variant="description" color="secondary" mono>
                  {effect.name + '.' + effect.method}
                </Text>
                <ValueInspector
                  small
                  value={effect.args.length > 1 ? effect.args : effect.args[0]}
                />
                <Text variant="description" mono>
                  =>
                </Text>
                <ValueInspector small value={effect.result} />
              </OperatorItem>
            ))}
            {operator.mutations.map((mutation, index) => (
              <OperatorItem key={index}>
                <Text variant="description" color="primary" mono>
                  {mutation.method}
                </Text>
                <Text variant="description" mono>
                  {mutation.path}
                </Text>
                <ValueInspector
                  small
                  value={
                    mutation.args.length > 1 ? mutation.args : mutation.args[0]
                  }
                />
              </OperatorItem>
            ))}
          </div>
        )}
      </Operator>
    </Pipe>
  </React.Fragment>
)

export default connect(ActionOperator)
