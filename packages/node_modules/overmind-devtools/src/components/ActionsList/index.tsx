import { createElement, SFC } from 'react'
import { useOvermind } from '../../overmind'
import { ActionsListItemType } from '../../overmind/types'
import { nameToColor } from '../../overmind/utils'
import * as textStyles from '../../styles/text'
import * as styles from './styles'

const ActionsList: SFC = () => {
  const { state, actions } = useOvermind()

  return (
    <div className={styles.list}>
      {state.currentApp.actionsList.map((item) => {
        if (item.type === ActionsListItemType.ACTION) {
          const action = state.currentApp.actions[item.id]

          return (
            <div
              className={styles.actionItem}
              key={item.id}
              onClick={() => actions.selectAction(item.id)}
            >
              <span
                className={styles.actionColor}
                style={{
                  backgroundColor: nameToColor(action.actionName),
                }}
              />
              <span className={textStyles.description}>
                {state.currentApp.currentActionId === item.id ? (
                  <b>{action.actionName}</b>
                ) : (
                  action.actionName
                )}
              </span>
              <span
                className={styles.errorIndication}
                style={{
                  visibility: action.hasError ? 'visible' : 'hidden',
                }}
              />
            </div>
          )
        }
        const mainAction = state.currentApp.actions[item.actionIds[0]]
        const groupedActionIds = item.actionIds.slice(1)

        return (
          <div key={item.id}>
            <div
              className={styles.actionItem}
              onClick={() => actions.selectAction(item.id)}
            >
              <span
                className={styles.actionColor}
                style={{ backgroundColor: nameToColor(mainAction.actionName) }}
              />
              <span className={textStyles.description}>
                {state.currentApp.currentActionId === item.id ? (
                  <b>
                    {mainAction.actionName} ( {groupedActionIds.length + 1} )
                  </b>
                ) : (
                  `${mainAction.actionName} ( ${groupedActionIds.length + 1} )`
                )}
              </span>
            </div>
            {item.isCollapsed
              ? null
              : groupedActionIds.map((actionId) => {
                  const action = state.currentApp.actions[actionId]
                  return (
                    <div
                      className={styles.actionSubItem}
                      key={actionId}
                      onClick={() => actions.selectAction(actionId)}
                    >
                      <span className={textStyles.description}>
                        {state.currentApp.currentActionId === actionId ? (
                          <b>{action.actionName}</b>
                        ) : (
                          action.actionName
                        )}
                      </span>
                    </div>
                  )
                })}
          </div>
        )
      })}
    </div>
  )
}

export default ActionsList
