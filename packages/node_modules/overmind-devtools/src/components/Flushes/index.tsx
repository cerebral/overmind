import * as React from 'react'
import { connect, Connect } from '../../app'
import Text from '../common/Text'
import {
  Wrapper,
  Panels,
  Panel,
  FlushWrapper,
  Mutation,
  Method,
  FlushDivider,
} from './elements'
import Inspector from '../Inspector'

type State = {
  expandedPaths: string[]
}

class Args extends React.Component<
  {
    args: any
  },
  State
> {
  state = {
    expandedPaths: [],
  }
  onToggleExpand = (path) => {
    const pathString = path.join('')

    if (this.state.expandedPaths.includes(pathString)) {
      this.setState({
        expandedPaths: this.state.expandedPaths.filter(
          (currentPath) => currentPath !== pathString
        ),
      })
    } else {
      this.setState({
        expandedPaths: this.state.expandedPaths.concat(pathString),
      })
    }
  }
  render() {
    return (
      <Inspector
        value={this.props.args}
        expandedPaths={this.state.expandedPaths}
        onToggleExpand={this.onToggleExpand}
      />
    )
  }
}

const Flushes: React.SFC<Connect> = ({ appState }) => (
  <Wrapper>
    <div>
      <Panels>
        <Panel>
          <Text variant="label" dense>
            flush count
          </Text>
          <Text variant="header" dense>
            {appState.flushes.length}
          </Text>
        </Panel>
        <Panel>
          <Text variant="label" dense>
            mutations count
          </Text>
          <Text variant="header" dense>
            {appState.flushesMutationsCount}
          </Text>
        </Panel>
        <Panel>
          <Text variant="label" dense>
            paths updated
          </Text>
          <Text variant="header" dense>
            {appState.flushesStatePathCount}
          </Text>
        </Panel>
      </Panels>
    </div>
    {appState.flushes.map((flush, index) => (
      <FlushWrapper key={index}>
        <FlushDivider>
          <Text variant="text" dense>
            #{appState.flushes.length - index}
          </Text>
        </FlushDivider>
        {flush.mutations.map((mutation, index) => {
          return (
            <Mutation key={index}>
              <Text variant="text" dense>
                <Method>{mutation.method}</Method>
              </Text>
              <Text variant="text" dense>
                {mutation.path}
              </Text>
              <React.Fragment>
                {mutation.args.map((arg, index) => (
                  <Args key={index} args={arg} />
                ))}
              </React.Fragment>
            </Mutation>
          )
        })}
      </FlushWrapper>
    ))}
  </Wrapper>
)

export default connect(Flushes)
