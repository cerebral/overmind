import { ipcRenderer } from 'electron'

type Message = {
  type: string
  port: string
}

type MessageCallback = (error: Error, message?: Message) => void

class Port {
  port: string
  messageCallback: MessageCallback
  connector: BackendConnector
  connectionResolver: Function
  connectionRejecter: Function
  constructor(
    connector: BackendConnector,
    port: string,
    messageCallback: MessageCallback
  ) {
    this.port = port
    this.messageCallback = messageCallback
    this.connector = connector
    ipcRenderer.on('port:added', this.onPortAdded)
    ipcRenderer.on('port:exists', this.onPortExists)
  }
  connect() {
    return new Promise((resolve, reject) => {
      this.connectionResolver = resolve
      this.connectionRejecter = reject
      ipcRenderer.send('port:add', this.port)
    })
  }
  equals(port: string) {
    return this.port === port
  }
  onPortAdded = (_, addedPort) => {
    if (addedPort === this.port) {
      ipcRenderer.on('message', this.onMessage)
      this.connector.sendMessage(this.port, 'ping')
    }
  }
  onPortExists = (_, port) => {
    if (port === this.port) {
      this.connectionRejecter(
        new Error('Something running on this port already')
      )
    }
  }
  onMessage = (_, message) => {
    if (message.port !== this.port) {
      return
    }

    if (message.type === 'ping') {
      this.connector.sendMessage(this.port, 'pong')
      return this.connectionResolver()
    }

    this.messageCallback(message)
  }
}

class BackendConnector {
  addedPorts: Port[] = []
  sendMessage(port: string, eventName: string, payload: object = null) {
    ipcRenderer.send('message', {
      port,
      type: eventName,
      data: payload,
    })
  }
  addPort(port: string, messageCallback: MessageCallback) {
    if (
      this.addedPorts.filter((portInstance) => portInstance.equals(port)).length
    ) {
      throw new Error('This port already exists')
    }
    const portInstance = new Port(this, port, messageCallback)

    portInstance.connect()
    this.addedPorts.push(portInstance)
  }
  removePort(port: string) {
    ipcRenderer.send('port:remove', port)
  }
  relaunch() {
    ipcRenderer.send('relaunch')
  }
}

export default BackendConnector
