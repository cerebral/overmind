export type Options = {
  name?: string
  devtools?: string
}

type CacheMessage = {
  value: any
  paths: string[]
  updateCount: number
}

export enum EventType {
  DERIVED = 'derived',
  DERIVED_DIRTY = 'derived:dirty',
  COMPUTED = 'computed',
  COMPUTED_DIRTY = 'computed:dirty',
  REACTION_ADD = 'reaction:add',
  REACTION_UPDATE = 'reaction:update',
  REACTION_REMOVE = 'reaction:remove',
  COMPONENT_ADD = 'component:add',
  COMPONENT_UPDATE = 'component:update',
  COMPONENT_REMOVE = 'component:remove',
}

export interface Events {
  [EventType.DERIVED]: {
    path: string
    paths: string[]
    updateCount: number
    value: any
  }
  [EventType.DERIVED_DIRTY]: {
    path: string
    flushId: number
  }
  [EventType.COMPUTED]: {
    path: string
    updateCount: number
    cache: CacheMessage[]
    limit: number
  }
  [EventType.COMPUTED_DIRTY]: {
    path: string
    flushId: number
  }
  [EventType.REACTION_ADD]: {
    path: string
    statePath: string
    updateCount: number
  }
  [EventType.REACTION_UPDATE]: {
    path: string
    statePath: string
    updateCount: number
    flushId: number
  }
  [EventType.REACTION_REMOVE]: {
    path: string
    statePath: string
    updateCount: number
  }
  [EventType.COMPONENT_ADD]: {
    componentId: number
    componentInstanceId: number
    name: string
    paths: string[]
  }
  [EventType.COMPONENT_UPDATE]: {
    componentId: number
    componentInstanceId: number
    name: string
    paths: string[]
    flushId?: number
  }
  [EventType.COMPONENT_REMOVE]: {
    componentId: number
    componentInstanceId: number
    name: string
  }
}

/**
 * NotNever
 */

export type EmptyIfNever<T> = [T] extends [never] ? {} : T

type NotNeverKeys<T> = {
  [P in keyof T]: T[P] extends never ? never : P
}[keyof T]

/**
 * Filter properties removing `never`
 */

// prettier-ignore
export type WithoutNever<T> = (
  // if the output has no keys... (all keys filtered out)
  keyof Pick<T, NotNeverKeys<T>> extends never
  // ...return never
  ? never
  // otherwise we return the filtered object
  : { [K in keyof Pick<T, NotNeverKeys<T>>]: Pick<T, NotNeverKeys<T>>[K] });

// because WithoutNever return never if there are no properties
// calling WithoutNever multiple time cleanup stuff like { lvl1: { lvl2: { lvl3: never } } }
// prettier-ignore
export type WithoutNeverDeep<T> = (
  // WithoutNever<WithoutNever<WithoutNever<WithoutNever<WithoutNever<
    // WithoutNever<WithoutNever<WithoutNever<WithoutNever<WithoutNever<
      WithoutNever<WithoutNever<WithoutNever<WithoutNever<WithoutNever<
        WithoutNever<WithoutNever<WithoutNever<WithoutNever<WithoutNever<
          T
        >>>>>
      >>>>>
    // >>>>>
  // >>>>>
);
