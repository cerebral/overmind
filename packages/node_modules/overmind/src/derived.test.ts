import App, { derive } from './'

type State = {
  foo: string
  upperFoo: string
}

describe('Derived', () => {
  test('should instantiate app with derived state', () => {
    const app = new App({
      state: {
        foo: 'bar',
        upperFoo: derive((state: State) => state.foo.toUpperCase()),
      },
    })
    expect(app.state.upperFoo).toEqual('BAR')
  })
  test('should track derived state', () => {
    let renderCount = 0
    const app = new App({
      state: {
        foo: 'bar',
        upperFoo: derive((state: State) => state.foo.toUpperCase()),
      },
      actions: (action) => ({
        changeFoo: action().mutation((state) => (state.foo = 'bar2')),
      }),
    })
    function render() {
      const trackId = app.trackState()
      app.state.upperFoo
      return app.clearTrackState(trackId)
    }
    app.addMutationListener(render(), () => {
      renderCount++
    })
    app.actions.changeFoo()
    expect(app.state.upperFoo).toBe('BAR2')
    expect(renderCount).toBe(1)
  })
})
