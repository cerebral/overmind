import App, { derive, TAction } from './'

type State = {
  foo: string
  upperFoo: string
}

describe('Derived', () => {
  test('should instantiate app with derived state', () => {
    const app = new App({
      state: {
        foo: 'bar',
        upperFoo: derive((state: State) => state.foo.toUpperCase()),
      },
    })
    expect(app.state.upperFoo).toEqual('BAR')
  })
  test('should track derived state', () => {
    let renderCount = 0
    const changeFoo: Action = ({ mutate }) =>
      mutate((state) => (state.foo = 'bar2'))
    const config = {
      state: {
        foo: 'bar',
        upperFoo: derive((state: State) => state.foo.toUpperCase()),
      },
      actions: {
        changeFoo,
      },
    }
    type Config = {
      state: {
        foo: string
        upperFoo: string
      }
      actions: typeof config.actions
    }
    type Action<Input = void, Output = any> = TAction<Input, Output, Config>

    const app = new App(config)
    function render() {
      const trackId = app.trackState()
      app.state.upperFoo
      return app.clearTrackState(trackId)
    }
    app.addMutationListener(render(), () => {
      renderCount++
    })
    app.actions.changeFoo()
    expect(app.state.upperFoo).toBe('BAR2')
    expect(renderCount).toBe(1)
  })
})
