import { ActionChain } from 'action-chain'
import { EventEmitter } from 'betsy'
import ProxyStateTree from 'proxy-state-tree'

import { createOperators } from './Action'
import Derived from './derived'
import Devtools, { Message, safeValue } from './Devtools'
import { EventType, Events, Options } from './internalTypes'
import Reaction from './reaction'
import { BaseApp, Configuration, TConfig } from './types'

export * from './types'

const isPlainObject = require('is-plain-object')

export { modules } from './modules'

export const log = (...objects: any[]) =>
  console.log(...objects.map((obj) => JSON.parse(JSON.stringify(obj))))

const hotReloadingCache = {}

export default class App<Config extends Configuration> implements BaseApp {
  private proxyStateTree: ProxyStateTree
  initialized: Promise<any>
  eventHub: EventEmitter<Events>
  devtools: Devtools
  actions: TConfig<Config>['actions']
  state: TConfig<Config>['state']
  // We add the context here so that App implements BaseApp (makes types simpler).
  context: TConfig<Config>['context'] & { state: TConfig<Config>['state'] }
  constructor(configuration: Config, options: Options = {}) {
    const name = options.name || 'MyApp'

    if (process.env.NODE_ENV === 'development') {
      if (hotReloadingCache[name]) {
        return hotReloadingCache[name]
      } else {
        hotReloadingCache[name] = this
      }
    }

    /*
      Set up an eventHub to trigger information from derived, computed and reactions
    */
    const eventHub = new EventEmitter<Events>()

    /*
      Create the proxy state tree instance with the state and a wrapper to expose
      the eventHub
    */
    const proxyStateTree = new ProxyStateTree(this.getState(configuration), {
      dynamicWrapper: (proxyStateTree, path, func) =>
        func(eventHub, proxyStateTree, path),
    })

    /*
      The action chain with the context configuration
    */
    const actionChain = new ActionChain(this.context, {
      providerExceptions: ['state'],
    })

    /*
      The action factory function
    */
    const operators = createOperators(proxyStateTree, actionChain)

    if (options.devtools !== false && typeof window !== 'undefined') {
      this.initializeDevtools(
        options.devtools,
        actionChain,
        eventHub,
        proxyStateTree
      )
    }

    this.initializeReactions(configuration, eventHub, proxyStateTree, operators)

    /*
      Identify when the state tree should flush out changes

      TODO:
        - How should I know when an operator is connected to a flushId?
        - Pass in operatorId on :async and set flushId directly?
        - Store operatorId on the flush and check?
    */
    actionChain.on('operator:async', (data) => {
      const flushData = proxyStateTree.flush()
      if (this.devtools && flushData.mutations.length) {
        this.devtools.send({
          type: 'flush',
          data: {
            ...data,
            ...flushData,
          },
        })
      }
    })
    actionChain.on('action:end', (data) => {
      const flushData = proxyStateTree.flush()
      if (this.devtools && flushData.mutations.length) {
        this.devtools.send({
          type: 'flush',
          data: {
            ...data,
            ...flushData,
          },
        })
      }
    })

    /*
      Expose the created actions
    */
    this.actions = this.getActions(configuration, operators)

    this.state = proxyStateTree.get()
    this.context = Object.assign({}, configuration.context || {}, {
      state: this.state,
    })
    this.proxyStateTree = proxyStateTree
    this.eventHub = eventHub

    if (configuration.onInitialize) {
      const onInitialize = configuration.onInitialize(operators)
      onInitialize.displayName = 'onInitialize'
      this.initialized = Promise.resolve(onInitialize(this))
    } else {
      this.initialized = Promise.resolve(null)
    }
  }
  private initializeDevtools(host, actionChain, eventHub, proxyStateTree) {
    const devtools = new Devtools(
      typeof document === 'undefined' ? 'NoName' : document.title || 'NoName'
    )
    devtools.connect(
      host,
      (message: Message) => {
        // To use for communication from devtools app
      }
    )
    actionChain.on('action:start', (data) =>
      devtools.send({
        type: 'action:start',
        data: {
          ...data,
          value: safeValue(data.value),
        },
      })
    )
    actionChain.on('operator:start', (data) =>
      devtools.send({
        type: 'operator:start',
        data,
      })
    )
    actionChain.on('operator:end', (data) =>
      devtools.send({
        type: 'operator:end',
        data: {
          ...data,
          result: safeValue(data.result),
        },
      })
    )
    actionChain.on('action:end', (data) =>
      devtools.send({
        type: 'action:end',
        data,
      })
    )
    actionChain.on('effect', (data) =>
      devtools.send({
        type: 'effect',
        data,
      })
    )
    actionChain.on('mutations', (data) =>
      devtools.send({
        type: 'mutations',
        data,
      })
    )
    for (let type in EventType) {
      eventHub.on(EventType[type], (data) =>
        devtools.send({
          type: EventType[type],
          data,
        })
      )
    }
    // This message is always the first as it is passed synchronously, all other
    // events are emitted async
    devtools.send({
      type: 'init',
      data: {
        state: proxyStateTree.get(),
      },
    })
    this.devtools = devtools
  }
  private initializeReactions(
    configuration,
    eventHub,
    proxyStateTree,
    operators
  ) {
    const reactions = Object.keys(configuration.reactions || {}).reduce(
      (aggr, name) => {
        if (typeof configuration.reactions[name] === 'function') {
          return Object.assign(aggr, {
            [name]: configuration.reactions[name]((stateCb, action) => {
              action.displayName = name
              return [stateCb, action]
            }, operators),
          })
        }

        return Object.keys(configuration.reactions[name] || {}).reduce(
          (aggr, subName) =>
            Object.assign(aggr, {
              [name + '.' + subName]: configuration.reactions[name](
                (stateCb, action) => {
                  action.displayName = name + '.' + subName
                  return [stateCb, action]
                },
                operators
              ),
            }),
          {}
        )
      },
      {}
    )
    Object.keys(reactions).forEach((name) => {
      const reaction = new Reaction(eventHub, proxyStateTree, name)
      reaction.create(reactions[name][0], reactions[name][1])
    })
  }
  private getState(configuration: Configuration) {
    let state = {}
    if (configuration.state) {
      state = this.processState(configuration.state)
    }

    return state
  }
  private processState(state: {}) {
    return Object.keys(state).reduce((aggr, key) => {
      const value = state[key]
      if (isPlainObject(value)) {
        aggr[key] = this.processState(value)
      } else if (typeof value === 'function') {
        aggr[key] = new Derived(value)
      } else {
        aggr[key] = value
      }

      return aggr
    }, {})
  }
  private getActions(configuration: Configuration, operators) {
    let actions = {}
    if (configuration.actions) {
      actions = configuration.actions
    }

    const evaluatedActions = Object.keys(actions).reduce((aggr, name) => {
      if (typeof actions[name] === 'function') {
        return Object.assign(aggr, {
          [name]: actions[name](operators),
        })
      }

      return Object.assign(aggr, {
        [name]: Object.keys(actions[name] || {}).reduce(
          (aggr, subName) =>
            Object.assign(aggr, {
              [subName]: actions[name][subName](operators),
            }),
          {}
        ),
      })
    }, {}) as any

    if (this.devtools) {
      Object.keys(evaluatedActions).forEach((key) => {
        if (typeof evaluatedActions[key] === 'function') {
          evaluatedActions[key].displayName = key
        } else {
          Object.keys(evaluatedActions[key]).forEach((subKey) => {
            evaluatedActions[key][subKey].displayName = key + '.' + subKey
          })
        }
      })
    }

    return evaluatedActions
  }
  trackState() {
    return this.proxyStateTree.startPathsTracking()
  }
  clearTrackState(id: number, cb?: () => void) {
    return this.proxyStateTree.clearPathsTracking(id, cb)
  }
  addMutationListener(paths, cb) {
    return this.proxyStateTree.addFlushListener(paths, cb)
  }
  createReactionFactory(prefix: string) {
    const reactions = []
    const instance = this
    return {
      add(
        name: string,
        stateCb: (state: TConfig<Config>['state']) => any,
        cb: Function
      ) {
        const reaction = new Reaction(
          instance.eventHub,
          instance.proxyStateTree,
          prefix + '.' + name
        )
        reaction.create(stateCb, cb)

        reactions.push(reaction)
      },
      dispose() {
        reactions.forEach((reaction) => reaction.destroy())
        reactions.length = 0
      },
    }
  }
}
