import ActionClass, {
  Compose,
  INoValueAction,
  IValueAction,
  createOperators,
} from './Action'
import Devtools, { Message, safeValue } from './Devtools'
import {
  DynamicModule,
  EventType,
  Events,
  Options,
  SubType,
} from './internalTypes'

import { ActionChain } from 'action-chain'
import { EventEmitter } from 'betsy'
import ProxyStateTree from 'proxy-state-tree'
import Reaction from './reaction'

export { default as derive } from './derived'
export { default as compute } from './computed'

export { IValueAction, Compose, EventType }

export const log = (...objects: any[]) =>
  console.log(...objects.map((obj) => JSON.parse(JSON.stringify(obj))))

export const dynamicModule = ((cb) => (namespace) =>
  cb(namespace)) as DynamicModule

/*
  BASE TYPES
*/

export type Configuration = {
  onInitialize?: any
  state?: any
  effects?: any
  actions?: any
  reactions?: any
}

/*
  DECLARE MODULE TYPES
*/
export interface IState {}

export interface IEffects {}

interface IApp extends IEffects {
  state: IState
}

export type TState<Config extends Configuration> = Config['state']

export type TEffects<Config extends Configuration> = Config['effects']

export type Mutate<Value = any> = (state: IApp['state'], value: Value) => void

export namespace Operation {
  export type Map<Value, ReturnValue> = (
    effects: IApp,
    value: Value
  ) => ReturnValue
  export type Filter<Value = any> = (effects: IApp, value: Value) => boolean
  export type When<Value = any> = (effects: IApp, value: Value) => boolean
  export type Run<Value = any> = (effects: IApp, value: Value) => void
  export type Fork<Value = any> = (effects: IApp, value: Value) => string
  export type Attempt<Value, ReturnValue> = (
    effects: IApp,
    value: Value
  ) => ReturnValue
}

export type Action<InitialValue = void, ReturnValue = any> = Compose<
  IApp['state'],
  IApp,
  InitialValue,
  ReturnValue
>

export type TAction<
  InitialValue,
  ReturnValue,
  App extends { state: any; effects: any }
> = Compose<
  App['state'],
  App['effects'] & { state: App['state'] },
  InitialValue,
  ReturnValue
>

export type DynamicAction<InitialValue = void, ReturnValue = any> = Compose<
  any,
  any,
  InitialValue,
  ReturnValue
>

export type Reaction = (
  reaction: (
    getState: (state: IApp['state']) => any,
    action: TActionCaller<void, IApp>
  ) => any,
  action: ActionClass<IApp['state'], IApp, undefined, undefined>
) => any

export type TReaction<App extends { state: any; effects: any }> = (
  reaction: (
    getState: (state: App['state']) => any,
    action: INoValueAction<App['state'], App['effects'], undefined, undefined>
  ) => any,
  action: ActionClass<App['state'], App['effects'], undefined, undefined>
) => any

export type Derive<T> = (state: IApp['state']) => T

export type Compute<Input, Output> = (
  value: Input
) => (state: IApp['state']) => Output

export type TConfig<Config extends Configuration> = {
  state: Config['state'] & {}
  effects: Config['effects'] & {}
  actions: Config['actions'] & {}
  reactions: any
  namespaces: any
}

export type TActionCreator<App> = {
  <InitialValue = void>(): TActionCaller<InitialValue, App>
}

export type TActionCaller<InitialValue, App> = [InitialValue] extends [void]
  ? INoValueAction<TConfig<App>['state'], App, InitialValue>
  : IValueAction<TConfig<App>['state'], App, InitialValue>

export type ActionCallback<App> = (action: TActionCreator<App>) => any

/*
  CLASS TYPES
*/

const hotReloadingCache = {}

export default class App<
  Config extends Configuration,
  EvalConfig extends TConfig<Config>
> {
  private proxyStateTree: ProxyStateTree
  eventHub: EventEmitter<Events>
  devtools: Devtools
  actions: {
    [T in keyof EvalConfig['actions']]: EvalConfig['actions'][T] extends Function
      ? ReturnType<EvalConfig['actions'][T]>
      : {
          [P in keyof EvalConfig['actions'][T]]: EvalConfig['actions'][T][P] extends Function
            ? ReturnType<EvalConfig['actions'][T][P]>
            : undefined
        }
  }
  state: EvalConfig['state']
  constructor(configuration: Config, options: Options = {}) {
    const name = options.name || 'MyApp'

    if (process.env.NODE_ENV === 'development') {
      if (hotReloadingCache[name]) {
        return hotReloadingCache[name]
      } else {
        hotReloadingCache[name] = this
      }
    }

    /*
      Set up an eventHub to trigger information from derived, computed and reactions
    */
    const eventHub = new EventEmitter<Events>()

    /*
      Create the proxy state tree instance with the state and a wrapper to expose
      the eventHub
    */
    const proxyStateTree = new ProxyStateTree(this.getState(configuration), {
      dynamicWrapper: (proxyStateTree, path, func) =>
        func(eventHub, proxyStateTree, path),
    })

    /*
      The action chain with the context configuration
    */
    const actionChain = new ActionChain(
      Object.assign({ state: proxyStateTree.get() }, configuration.effects),
      { providerExceptions: ['state'] }
    )

    /*
      The action factory function
    */
    const operators = createOperators(proxyStateTree, actionChain)

    if (options.devtools && typeof window !== 'undefined') {
      this.initializeDevtools(
        options.devtools,
        actionChain,
        eventHub,
        proxyStateTree
      )
    }

    this.initializeReactions(configuration, eventHub, proxyStateTree, operators)

    /*
      Identify when the state tree should flush out changes

      TODO:
        - How should I know when an operator is connected to a flushId?
        - Pass in operatorId on :async and set flushId directly?
        - Store operatorId on the flush and check?
    */
    actionChain.on('operator:async', (data) => {
      const flushData = proxyStateTree.flush()
      if (this.devtools && flushData.mutations.length) {
        this.devtools.send({
          type: 'flush',
          data: {
            ...data,
            ...flushData,
          },
        })
      }
    })
    actionChain.on('action:end', (data) => {
      const flushData = proxyStateTree.flush()
      if (this.devtools && flushData.mutations.length) {
        this.devtools.send({
          type: 'flush',
          data: {
            ...data,
            ...flushData,
          },
        })
      }
    })

    /*
      Expose the created actions
    */
    this.actions = this.getActions(configuration, operators)

    this.state = proxyStateTree.get()
    this.proxyStateTree = proxyStateTree
    this.eventHub = eventHub

    if (configuration.onInitialize) {
      const onInitialize = operators.compose(configuration.onInitialize)
      // @ts-ignore
      onInitialize.displayName = 'onInitialize'
      onInitialize(undefined)
    }
  }
  private initializeDevtools(host, actionChain, eventHub, proxyStateTree) {
    const devtools = new Devtools()
    devtools.connect(
      host,
      (message: Message) => {
        // To use for communication from devtools app
      }
    )
    actionChain.on('action:start', (data) =>
      devtools.send({
        type: 'action:start',
        data: {
          ...data,
          value: safeValue(data.value),
        },
      })
    )
    actionChain.on('operator:start', (data) =>
      devtools.send({
        type: 'operator:start',
        data,
      })
    )
    actionChain.on('operator:end', (data) =>
      devtools.send({
        type: 'operator:end',
        data: {
          ...data,
          result: safeValue(data.result),
        },
      })
    )
    actionChain.on('action:end', (data) =>
      devtools.send({
        type: 'action:end',
        data,
      })
    )
    actionChain.on('effect', (data) =>
      devtools.send({
        type: 'effect',
        data,
      })
    )
    actionChain.on('mutations', (data) =>
      devtools.send({
        type: 'mutations',
        data,
      })
    )
    for (let type in EventType) {
      eventHub.on(EventType[type], (data) =>
        devtools.send({
          type: EventType[type],
          data,
        })
      )
    }
    // This message is always the first as it is passed synchronously, all other
    // events are emitted async
    devtools.send({
      type: 'init',
      data: {
        state: proxyStateTree.get(),
      },
    })
    this.devtools = devtools
  }
  private initializeReactions(
    configuration,
    eventHub,
    proxyStateTree,
    operators
  ) {
    const reactions = Object.keys(configuration.reactions || {}).reduce(
      (aggr, name) => {
        if (typeof configuration.reactions[name] === 'function') {
          return Object.assign(aggr, {
            [name]: configuration.reactions[name]((stateCb, action) => {
              action.displayName = name
              return [stateCb, action]
            }, operators),
          })
        }

        return Object.keys(configuration.reactions[name] || {}).reduce(
          (aggr, subName) =>
            Object.assign(aggr, {
              [name + '.' + subName]: configuration.reactions[name](
                (stateCb, action) => {
                  action.displayName = name + '.' + subName
                  return [stateCb, action]
                },
                operators
              ),
            }),
          {}
        )
      },
      {}
    )
    Object.keys(reactions).forEach((name) => {
      const reaction = new Reaction(eventHub, proxyStateTree, name)
      reaction.create(reactions[name][0], reactions[name][1])
    })
  }
  private getState(configuration) {
    let state = {}
    if (configuration.state) {
      state = this.transformStateToPlainObject(configuration.state)
    }

    return state
  }
  private transformStateToPlainObject(state: {}) {
    return Object.keys(state).reduce((aggr, key) => {
      aggr[key] = state[key]

      return aggr
    }, {})
  }
  private getActions(configuration, operators) {
    let actions = {}
    if (configuration.actions) {
      actions = configuration.actions
    }

    const evaluatedActions = Object.keys(actions).reduce((aggr, name) => {
      if (typeof actions[name] === 'function') {
        return Object.assign(aggr, {
          [name]: actions[name](operators),
        })
      }

      return Object.assign(aggr, {
        [name]: Object.keys(actions[name] || {}).reduce(
          (aggr, subName) =>
            Object.assign(aggr, {
              [subName]: actions[name][subName](operators),
            }),
          {}
        ),
      })
    }, {}) as any

    if (this.devtools) {
      Object.keys(evaluatedActions).forEach((key) => {
        if (typeof evaluatedActions[key] === 'function') {
          evaluatedActions[key].displayName = key
        } else {
          Object.keys(evaluatedActions[key]).forEach((subKey) => {
            evaluatedActions[key][subKey].displayName = key + '.' + subKey
          })
        }
      })
    }

    return evaluatedActions
  }
  trackState() {
    return this.proxyStateTree.startPathsTracking()
  }
  clearTrackState(id: number, cb?: () => void) {
    return this.proxyStateTree.clearPathsTracking(id, cb)
  }
  addMutationListener(paths, cb) {
    return this.proxyStateTree.addMutationListener(paths, cb)
  }
  createReactionFactory(prefix: string) {
    const reactions = []
    const instance = this
    return {
      add(
        name: string,
        stateCb: (state: TConfig<Config>['state']) => any,
        cb: Function
      ) {
        const reaction = new Reaction(
          instance.eventHub,
          instance.proxyStateTree,
          prefix + '.' + name
        )
        reaction.create(stateCb, cb)

        reactions.push(reaction)
      },
      dispose() {
        reactions.forEach((reaction) => reaction.destroy())
        reactions.length = 0
      },
    }
  }
}
