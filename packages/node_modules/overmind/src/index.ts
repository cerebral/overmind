import { EventEmitter } from 'betsy'
import { IS_PROXY, ProxyStateTree } from 'proxy-state-tree'
import { Derived } from './derived'
import { Devtools, Message, safeValue } from './Devtools'
import {
  Events,
  EventType,
  Options,
  ResolveActions,
  ResolveState,
} from './internalTypes'
import { proxifyEffects } from './proxyfyEffects'
import { Reaction } from './reaction'
import {
  Configuration,
  TAction,
  TConfig,
  TDerive,
  TOperator,
  TReaction,
  TValueContext,
  TOnInitialize,
} from './types'

export * from './types'

/** This type can be overwriten by app developers if they want to avoid
 * typing and then they can import `Action`,  `Operation` etc. directly from
 * overmind.
 */
export interface IConfig {}

type TheConfig = IConfig & TConfig<{ actions: {} }>

export type Action<Value = void> = TAction<TheConfig, Value>

export type Derive<Parent extends object, Value> = TDerive<
  TheConfig,
  Parent,
  Value
>

export type Reaction = TReaction<TheConfig>

export type OnInitialize = TOnInitialize<TheConfig>

const isPlainObject = require('is-plain-object')
const IS_PRODUCTION = process.env.NODE_ENV === 'production'
const IS_DEVELOPMENT = process.env.NODE_ENV === 'development'
const IS_PIPE = Symbol('pipe')

export const log = (...objects: any[]) =>
  console.log(...objects.map((obj) => JSON.parse(JSON.stringify(obj))))

const hotReloadingCache = {}

// We do not use TConfig<Config> directly to type the class in order to avoid
// the 'import(...)' function to be used in exported types.

export class Overmind<Config extends Configuration> implements Configuration {
  private proxyStateTree: ProxyStateTree
  private actionReferences: Function[] = []
  private nextExecutionId: number = 0
  initialized: Promise<any>
  eventHub: EventEmitter<Events>
  devtools: Devtools
  actions: ResolveActions<Config['actions'] & {}>
  state: ResolveState<Config['state'] & {}>
  effects: Config['effects'] & {}
  constructor(configuration: Config, options: Options = {}) {
    const name = options.name || 'MyConfig'

    if (IS_DEVELOPMENT) {
      if (hotReloadingCache[name]) {
        return hotReloadingCache[name]
      } else {
        hotReloadingCache[name] = this
      }
    }

    /*
      Set up an eventHub to trigger information from derived, computed and reactions
    */
    const eventHub = new EventEmitter<Events>()

    /*
      Create the proxy state tree instance with the state and a wrapper to expose
      the eventHub
    */
    const proxyStateTree = new ProxyStateTree(this.getState(configuration), {
      dynamicWrapper: (proxyStateTree, path, func) =>
        func(eventHub, proxyStateTree, path),
    })

    this.state = proxyStateTree.get()
    this.effects = configuration.effects || {}
    this.proxyStateTree = proxyStateTree
    this.eventHub = eventHub

    /*
      The action factory function
    */

    if (options.devtools !== false && typeof window !== 'undefined') {
      this.initializeDevtools(options.devtools, eventHub, proxyStateTree)
    }

    this.initializeReactions(configuration, eventHub, proxyStateTree)

    /*
      Identify when the state tree should flush out changes

      TODO:
        - How should I know when an operator is connected to a flushId?
        - Pass in operatorId on :async and set flushId directly?
        - Store operatorId on the flush and check?
    */
    eventHub.on(EventType.OPERATOR_ASYNC, (data) => {
      const flushData = proxyStateTree.flush()
      if (this.devtools && flushData.mutations.length) {
        this.devtools.send({
          type: 'flush',
          data: {
            ...data,
            ...flushData,
          },
        })
      }
    })
    eventHub.on(EventType.ACTION_END, (data) => {
      const flushData = proxyStateTree.flush()
      if (this.devtools && flushData.mutations.length) {
        this.devtools.send({
          type: 'flush',
          data: {
            ...data,
            ...flushData,
          },
        })
      }
    })

    /*
      Expose the created actions
    */
    this.actions = this.getActions(configuration)

    if (configuration.onInitialize) {
      const onInitialize = this.createAction(
        'onInitialize',
        configuration.onInitialize
      )

      this.initialized = Promise.resolve(onInitialize(this))
    } else {
      this.initialized = Promise.resolve(null)
    }

    if (IS_PRODUCTION) {
      let nextTick
      const flushTree = () => proxyStateTree.flush()
      this.proxyStateTree.addMutationListener(() => {
        clearTimeout(nextTick)
        nextTick = setTimeout(flushTree, 0)
      })
    }
  }
  private createExecution(name, action) {
    return {
      actionId: this.actionReferences.indexOf(action),
      executionId: this.nextExecutionId++,
      actionName: name,
      operatorId: -1,
      path: [],
      startMutationTracking: this.proxyStateTree.startMutationTracking.bind(
        this.proxyStateTree
      ),
      clearMutationTracking: this.proxyStateTree.clearMutationTracking.bind(
        this.proxyStateTree
      ),
      emit: this.eventHub.emit.bind(this.eventHub),
    }
  }
  private createContext(value, execution, state) {
    return Object.assign(
      {
        value,
        state,
        execution,
      },
      this.trackEffects(this.effects, execution)
    )
  }
  private scopeValue(scopedTree: ProxyStateTree, value: any) {
    if (!value) {
      return value
    }
    if (value[IS_PROXY]) {
      return scopedTree.scope(value)
    } else if (isPlainObject(value)) {
      return Object.assign(
        {},
        ...Object.keys(value).map((key) => ({
          [key]: scopedTree.scope(value[key]),
        }))
      )
    } else {
      return value
    }
  }

  private createAction(name, action) {
    this.actionReferences.push(action)
    return (value?) => {
      if (IS_PRODUCTION || action[IS_PIPE]) {
        return new Promise((resolve, reject) => {
          const execution = this.createExecution(name, action)
          this.eventHub.emit(EventType.ACTION_START, execution)

          action(
            null,
            this.createContext(value, execution, this.proxyStateTree.get()),
            (err, val) => {
              this.eventHub.emit(EventType.ACTION_END, execution)
              if (err) reject(err)
              else resolve(val)
            }
          )
        })
      } else {
        const execution = this.createExecution(name, action)
        this.eventHub.emit(EventType.ACTION_START, execution)
        this.eventHub.emit(EventType.OPERATOR_START, {
          ...execution,
          operatorId: 0,
          type: 'action',
        })
        const scopedTree = this.proxyStateTree.getScopedTree()
        scopedTree.startMutationTracking()
        const result = action(
          this.createContext(
            this.scopeValue(scopedTree, value),
            execution,
            scopedTree.get()
          )
        )
        this.eventHub.emit(EventType.OPERATOR_END, {
          ...execution,
          isAsync: result instanceof Promise,
          operatorId: 0,
          result: undefined,
        })
        this.eventHub.emit(EventType.ACTION_END, execution)
        const mutations = scopedTree.clearMutationTracking()
        mutations.length &&
          this.eventHub.emit(EventType.MUTATIONS, {
            ...execution,
            operatorId: 0,
            mutations,
          })
        scopedTree.startMutationTracking()
        scopedTree.addMutationListener((mutation) => {
          this.eventHub.emit(EventType.MUTATIONS, {
            ...execution,
            operatorId: 0,
            mutations: [mutation],
          })
          setTimeout(() => {
            scopedTree.clearMutationTracking()
            const flushData = scopedTree.flush()
            if (flushData.mutations.length) {
              this.devtools.send({
                type: 'flush',
                data: {
                  ...execution,
                  ...flushData,
                },
              })
            }
            scopedTree.startMutationTracking()
          })
        })

        const flushData = scopedTree.flush()
        if (this.devtools && flushData.mutations.length) {
          this.devtools.send({
            type: 'flush',
            data: {
              ...execution,
              ...flushData,
            },
          })
        }
        return Promise.resolve(result)
      }
    }
  }
  private trackEffects(effects = {}, execution) {
    if (IS_PRODUCTION) {
      return effects
    }

    return proxifyEffects(this.effects, (effect) =>
      this.eventHub.emitAsync(EventType.EFFECT, { ...execution, ...effect })
    )
  }
  private initializeDevtools(host, eventHub, proxyStateTree) {
    const devtools = new Devtools(
      typeof document === 'undefined' ? 'NoName' : document.title || 'NoName'
    )
    devtools.connect(
      host,
      (message: Message) => {
        // To use for communication from devtools app
      }
    )
    for (let type in EventType) {
      eventHub.on(EventType[type], (data) =>
        devtools.send({
          type: EventType[type],
          data,
        })
      )
    }
    // This message is always the first as it is passed synchronously, all other
    // events are emitted async
    devtools.send({
      type: 'init',
      data: {
        state: proxyStateTree.get(),
      },
    })
    this.devtools = devtools
  }
  private initializeReactions(configuration, eventHub, proxyStateTree) {
    const reactions = Object.keys(configuration.reactions || {}).reduce(
      (aggr, name) => {
        if (typeof configuration.reactions[name] === 'function') {
          return Object.assign(aggr, {
            [name]: configuration.reactions[name]((stateCb, action) => {
              action.displayName = name
              return [stateCb, action]
            }),
          })
        }

        return Object.keys(configuration.reactions[name] || {}).reduce(
          (aggr, subName) =>
            Object.assign(aggr, {
              [name + '.' + subName]: configuration.reactions[name](
                (stateCb, action) => {
                  action.displayName = name + '.' + subName
                  return [stateCb, action]
                }
              ),
            }),
          {}
        )
      },
      {}
    )
    Object.keys(reactions).forEach((name) => {
      const reaction = new Reaction(eventHub, proxyStateTree, name)
      reaction.create(
        reactions[name][0],
        this.createAction(name, reactions[name][1])
      )
    })
  }
  private getState(configuration: Configuration) {
    let state = {}
    if (configuration.state) {
      state = this.processState(configuration.state)
    }

    return state
  }
  private processState(state: {}) {
    return Object.keys(state).reduce((aggr, key) => {
      if (key === '__esModule') {
        return aggr
      }

      const value = state[key]
      if (isPlainObject(value)) {
        aggr[key] = this.processState(value)
      } else if (typeof value === 'function') {
        aggr[key] = new Derived(value)
      } else {
        aggr[key] = value
      }

      return aggr
    }, {})
  }
  private getActions(configuration: Configuration) {
    let actions = {}
    if (configuration.actions) {
      actions = configuration.actions
    }

    const evaluatedActions = Object.keys(actions).reduce((aggr, name) => {
      if (typeof actions[name] === 'function') {
        return Object.assign(aggr, {
          [name]: this.createAction(name, actions[name]),
        })
      }

      return Object.assign(aggr, {
        [name]: Object.keys(actions[name] || {}).reduce(
          (aggr, subName) =>
            Object.assign(
              aggr,
              typeof actions[name][subName] === 'function'
                ? {
                    [subName]: this.createAction(
                      subName,
                      actions[name][subName]
                    ),
                  }
                : {}
            ),
          {}
        ),
      })
    }, {}) as any

    if (this.devtools) {
      Object.keys(evaluatedActions).forEach((key) => {
        if (typeof evaluatedActions[key] === 'function') {
          evaluatedActions[key].displayName = key
        } else {
          Object.keys(evaluatedActions[key]).forEach((subKey) => {
            evaluatedActions[key][subKey].displayName = key + '.' + subKey
          })
        }
      })
    }

    return evaluatedActions
  }
  trackState() {
    return this.proxyStateTree.startPathsTracking()
  }
  clearTrackState(id: number, cb?: () => void) {
    return this.proxyStateTree.clearPathsTracking(id, cb)
  }
  addMutationListener(paths, cb) {
    return this.proxyStateTree.addFlushListener(paths, cb)
  }
  createReactionFactory(prefix: string) {
    const reactions: Reaction[] = []
    const instance = this
    return {
      add(
        name: string,
        stateCb: (state: ResolveState<Config['state'] & {}>) => any,
        cb: Function
      ) {
        const reaction = new Reaction(
          instance.eventHub,
          instance.proxyStateTree,
          prefix + '.' + name
        )
        reaction.create(stateCb, cb)

        reactions.push(reaction)
      },
      dispose() {
        reactions.forEach((reaction) => reaction.destroy())
        reactions.length = 0
      },
    }
  }
}

/*
  OPERATORS
  needs to be in this file for typing override to work
*/
export type Operator<Input, Output> = TOperator<TheConfig, Input, Output>

export function asPipe<T>(operator: T): T {
  operator[IS_PIPE] = true
  return operator;
}

export function pipe<Config extends Configuration, A, B, C>(
  aOperator: TOperator<Config, A, B>
): TOperator<Config, A, C>

export function pipe<Config extends Configuration, A, B, C, D>(
  aOperator: TOperator<Config, A, B>,
  bOperator: TOperator<Config, B, C>
): TOperator<Config, A, D>

export function pipe<Config extends Configuration, A, B, C, D, E>(
  aOperator: TOperator<Config, A, B>,
  bOperator: TOperator<Config, B, C>,
  cOperator: TOperator<Config, C, D>
): TOperator<Config, A, E>

export function pipe<Config extends Configuration, A, B, C, D, E, F>(
  aOperator: TOperator<Config, A, B>,
  bOperator: TOperator<Config, B, C>,
  cOperator: TOperator<Config, C, D>,
  dOperator: TOperator<Config, D, E>
): TOperator<Config, A, F>

export function pipe<Config extends Configuration, A, B, C, D, E, F, G>(
  aOperator: TOperator<Config, A, B>,
  bOperator: TOperator<Config, B, C>,
  cOperator: TOperator<Config, C, D>,
  dOperator: TOperator<Config, D, E>,
  eOperator: TOperator<Config, E, F>
): TOperator<Config, A, G>

export function pipe<Config extends Configuration, A, B, C, D, E, F, G, H>(
  aOperator: TOperator<Config, A, B>,
  bOperator: TOperator<Config, B, C>,
  cOperator: TOperator<Config, C, D>,
  dOperator: TOperator<Config, D, E>,
  eOperator: TOperator<Config, E, F>,
  fOperator: TOperator<Config, F, G>
): TOperator<Config, A, H>

export function pipe(...operators) {
  const instance = (err, context, next, final = next) => {
    if (err) next(err)
    else {
      let operatorIndex = 0
      const run = (runErr, runContext) =>
        operators[operatorIndex++](runErr, runContext, runNextOperator, final)

      const runNextOperator = (operatorError, operatorContext) => {
        if (operatorError) return next(operatorError)
        if (operatorIndex >= operators.length)
          return next(null, operatorContext)

        if (operatorContext.value instanceof Promise) {
          context.execution.emit(EventType.OPERATOR_ASYNC, {
            ...context.execution,
            isAsync: true,
          })
          operatorContext.value
            .then((promiseValue) =>
              run(null, { ...operatorContext, value: promiseValue })
            )
            .catch((promiseError) => next(promiseError, operatorContext))
        } else {
          try {
            run(null, operatorContext)
          } catch (operatorError) {
            next(operatorError, operatorContext)
          }
        }
      }

      runNextOperator(null, context)
    }
  }
  return asPipe(instance)
}

/*
  OPERATORS
*/

function startDebugOperator(type, arg, context) {
  if (IS_PRODUCTION) {
    return
  }
  const name =
    typeof arg === 'function' ? arg.displayName || arg.name : arg.toString()

  context.execution.emit(EventType.OPERATOR_START, {
    ...context.execution,
    operatorId: context.execution.operatorId + 1,
    name,
    type,
  })
}

function stopDebugOperator(context) {
  if (IS_PRODUCTION) {
    return
  }

  context.execution.emit(EventType.OPERATOR_END, {
    ...context.execution,
    result: safeValue(context.value),
    isAsync: context.value instanceof Promise,
  })
}

function createContext(context, value, path?) {
  if (IS_PRODUCTION) {
    return {
      ...context,
      value,
    }
  }

  return {
    ...context,
    value,
    execution: {
      ...context.execution,
      operatorId: context.execution.operatorId + 1,
      path: path || context.execution.path,
    },
  }
}

function createNextPath(next) {
  if (IS_PRODUCTION) {
    return next
  }

  return (err, context) => {
    const newContext = {
      ...context,
      execution: {
        ...context.execution,
        path: context.execution.path.slice(
          0,
          context.execution.path.length - 1
        ),
      },
    }
    if (err) next(err, newContext)
    else next(null, newContext)
  }
}

export function map<Input, Output, Config extends Configuration = TheConfig>(
  operation: (input: TValueContext<Config, Input>) => Output
): TOperator<Config, Input, Output extends Promise<infer U> ? U : Output> {
  const instance = (err, context, next) => {
    if (err) next(err)
    else {
      startDebugOperator('map', operation, context)
      const value = operation(context)
      const newContext = createContext(context, value)
      stopDebugOperator(newContext)
      next(null, newContext)
    }
  }

  return asPipe(instance)
}

export function run<Input, Config extends Configuration = TheConfig>(
  operation: (input: TValueContext<Config, Input>) => any
): TOperator<Config, Input, Input> {
  const instance = (err, context, next) => {
    if (err) next(err)
    else {
      startDebugOperator('run', operation, context)
      const result = operation(context)
      const newContext = createContext(
        context,
        result instanceof Promise
          ? result.then(() => context.value)
          : context.value
      )
      stopDebugOperator(newContext)
      next(null, newContext)
    }
  }

  return asPipe(instance)
}

export function forEach<
  Input extends any[],
  Config extends Configuration = TheConfig
>(
  forEachItemOperator: TOperator<Config, Input[0], any>
): TOperator<Config, Input, Input> {
  const instance = (err, context, next) => {
    if (err) next(err)
    else {
      let array = context.value
      let evaluatingCount = array.length
      let lastContext
      let hasErrored = false
      const evaluate = (err) => {
        if (hasErrored) {
          return
        }
        if (err) {
          hasErrored = true
          return next(err)
        }
        evaluatingCount--

        if (!evaluatingCount) {
          stopDebugOperator(lastContext)
          next(null, lastContext)
        }
      }
      startDebugOperator('forEach', '', context)

      array.forEach((value, index) => {
        lastContext = createContext(
          lastContext || context,
          value,
          context.execution.path.concat(String(index))
        )
        const nextWithPath = createNextPath(evaluate)
        forEachItemOperator(null, lastContext, nextWithPath)
      })
    }
  }

  return asPipe(instance)
}

export function parallel<Input, Config extends Configuration = TheConfig>(
  operators: TOperator<Config, Input, any>[]
): TOperator<Config, Input, Input> {
  const instance = (err, context, next) => {
    if (err) next(err)
    else {
      let evaluatingCount = operators.length
      let lastContext
      let hasErrored = false
      const evaluate = (err) => {
        if (hasErrored) {
          return
        }
        if (err) {
          hasErrored = true
          return next(err, lastContext)
        }
        evaluatingCount--

        if (!evaluatingCount) {
          stopDebugOperator(lastContext)
          next(null, lastContext)
        }
      }
      startDebugOperator('parallel', '', context)

      operators.forEach((operator, index) => {
        lastContext = createContext(
          lastContext || context,
          context.value,
          context.execution.path.concat(String(index))
        )
        const nextWithPath = createNextPath(evaluate)
        operator(null, lastContext, nextWithPath)
      })
    }
  }

  return asPipe(instance)
}

export function filter<Input, Config extends Configuration = TheConfig>(
  operation: (input: TValueContext<Config, Input>) => boolean
): TOperator<Config, Input, Input> {
  const instance = (err, context, next, final) => {
    if (err) next(err)
    else {
      startDebugOperator('filter', operation, context)
      if (operation(context)) {
        const newContext = createContext(context, context.value)
        stopDebugOperator(newContext)
        next(null, newContext)
      } else {
        const newContext = createContext(context, context.value)
        stopDebugOperator(newContext)
        final(null, newContext)
      }
    }
  }

  return asPipe(instance)
}

export function mutate<Input, Config extends Configuration = TheConfig>(
  operation: (input: TValueContext<Config, Input>) => void
): TOperator<Config, Input, Input> {
  const instance = (err, context, next) => {
    if (err) next(err)
    else {
      startDebugOperator('mutate', operation, context)
      context.execution.startMutationTracking()
      operation(context)
      const newContext = createContext(context, context.value)
      const mutations = context.execution.clearMutationTracking()
      context.execution.emit(EventType.MUTATIONS, {
        ...newContext.execution,
        mutations,
      })
      stopDebugOperator(newContext)
      next(null, newContext)
    }
  }

  return asPipe(instance)
}

export function fork<
  Input,
  Paths extends { [key: string]: TOperator<Config, Input, any> },
  Config extends Configuration = TheConfig
>(
  operation: (input: TValueContext<Config, Input>) => keyof Paths,
  paths: Paths
): TOperator<Config, Input, Input> {
  const instance = (err, context, next) => {
    if (err) next(err)
    else {
      startDebugOperator('fork', operation, context)
      const path = operation(context)
      const newContext = createContext(
        context,
        context.value,
        context.execution.path.concat(path)
      )
      const nextWithPaths = createNextPath((err, returnedContext) => {
        if (err) next(err)
        else {
          stopDebugOperator(newContext)
          next(null, { ...returnedContext, value: newContext.value })
        }
      })
      paths[path](null, newContext, nextWithPaths)
    }
  }

  return asPipe(instance)
}

export function when<
  Input,
  OutputA,
  OutputB,
  Config extends Configuration = TheConfig
>(
  operation: (input: TValueContext<Config, Input>) => boolean,
  paths: {
    true: TOperator<Config, Input, OutputA>
    false: TOperator<Config, Input, OutputB>
  }
): TOperator<Config, Input, OutputA | OutputB> {
  const instance = (err, context, next) => {
    if (err) next(err)
    else {
      startDebugOperator('when', operation, context)
      if (operation(context)) {
        const newContext = createContext(
          context,
          context.value,
          context.execution.path.concat('true')
        )
        const nextWithPath = createNextPath(next)
        stopDebugOperator(newContext)
        paths.true(null, newContext, nextWithPath)
      } else {
        const newContext = createContext(
          context,
          context.value,
          context.execution.path.concat('false')
        )
        const nextWithPath = createNextPath(next)
        stopDebugOperator(newContext)
        paths.false(null, newContext, nextWithPath)
      }
    }
  }

  return asPipe(instance)
}

export function wait<Input, Config extends Configuration = TheConfig>(
  ms: number
): TOperator<Config, Input, Input> {
  const instance = (err, context, next) => {
    if (err) next(err)
    else {
      startDebugOperator('wait', ms, context)
      const newContext = createContext(context, context.value)
      setTimeout(() => next(null, newContext), ms)
    }
  }

  return asPipe(instance)
}

export function debounce<Input, Config extends Configuration = TheConfig>(
  ms: number
): TOperator<Config, Input, Input> {
  let timeout
  let previousFinal
  const instance = (err, context, next, final) => {
    if (err) {
      return next(err)
    }
    startDebugOperator('debounce', ms, context)
    if (timeout) {
      clearTimeout(timeout)
      previousFinal(null, context)
    }
    previousFinal = final
    timeout = setTimeout(() => {
      timeout = null
      const newContext = createContext(context, context.value)
      stopDebugOperator(newContext)
      next(null, newContext)
    }, ms)
  }

  return asPipe(instance)
}
