import { EventEmitter } from 'betsy'
import ProxyStateTree from 'proxy-state-tree'
import { Events, EventType } from './'
import { INoValueAction } from './Action'

export type ReactionConfig<State, Providers> = (
  state: (state: State) => any,
  action: INoValueAction<State, Providers & { state: State }, void>
) => Reaction<State, Providers>

class Reaction<State, Providers> {
  eventHub: EventEmitter<Events>
  proxyStateTree: ProxyStateTree
  path: string
  proxyStateTreeListener: any
  statePath: string
  updateCount: number
  constructor(
    eventHub: EventEmitter<Events>,
    proxyStateTree: ProxyStateTree,
    path
  ) {
    this.eventHub = eventHub
    this.proxyStateTree = proxyStateTree
    this.path = path
    this.proxyStateTreeListener = null
    this.updateCount = 0
  }
  create(stateCb: (state: State) => any, cb: any) {
    const trackId = this.proxyStateTree.startPathsTracking()
    stateCb(this.proxyStateTree.get())
    this.statePath = Array.from(
      this.proxyStateTree.clearPathsTracking(trackId)
    )[0]

    this.proxyStateTreeListener = this.proxyStateTree.addMutationListener(
      (mutations) => {
        for (let mutationIndex in mutations) {
          const mutation = mutations[mutationIndex]
          if (mutation.path.indexOf(this.statePath) === 0) {
            this.eventHub.emitAsync(EventType.REACTION_UPDATE, {
              path: this.path,
              statePath: this.statePath,
              updateCount: ++this.updateCount,
            })
            cb()
          }
        }
      }
    )

    this.eventHub.emitAsync(EventType.REACTION_ADD, {
      path: this.path,
      statePath: this.statePath,
      updateCount: this.updateCount,
    })
  }
  destroy() {
    this.eventHub.emitAsync(EventType.REACTION_REMOVE, {
      path: this.path,
      statePath: this.statePath,
      updateCount: this.updateCount,
    })
    this.proxyStateTreeListener.dispose()
  }
}

export default Reaction
