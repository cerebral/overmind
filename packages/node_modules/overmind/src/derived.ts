import { EventEmitter } from 'betsy'
import ProxyStateTree from 'proxy-state-tree'
import { Events, EventType } from './'

class Derived {
  isDirty: boolean
  proxyStateTreeListener: any
  value: any
  cb: (state: object) => void
  paths: Set<string>
  updateCount: number
  constructor(cb) {
    this.isDirty = true
    this.proxyStateTreeListener = null
    this.value = null
    this.cb = cb
    this.updateCount = 0
    return this.evaluate.bind(this)
  }
  evaluate(
    eventHub: EventEmitter<Events>,
    proxyStateTree: ProxyStateTree,
    path
  ) {
    if (this.isDirty) {
      const trackId = proxyStateTree.startPathsTracking()
      this.value = this.cb(proxyStateTree.get())
      this.isDirty = false
      this.paths = proxyStateTree.clearPathsTracking(trackId)
      if (this.proxyStateTreeListener) {
        this.proxyStateTreeListener.update(this.paths)
      } else {
        this.proxyStateTreeListener = proxyStateTree.addMutationListener(
          this.paths,
          (flushId) => {
            eventHub.emitAsync(EventType.DERIVED_DIRTY, {
              path,
              flushId,
            })
            this.isDirty = true
          }
        )
      }
      eventHub.emitAsync(EventType.DERIVED, {
        path,
        paths: Array.from(this.paths),
        updateCount: this.updateCount,
        value: this.value,
      })
      this.updateCount++
    }

    // Tracks the paths for the consumer of this derived value
    for (let path of this.paths) {
      proxyStateTree.addTrackingPath(path)
    }

    return this.value
  }
}

export default function derive<NewValue>(
  cb: (state: object) => NewValue
): NewValue {
  return (new Derived(cb) as any) as NewValue
}
