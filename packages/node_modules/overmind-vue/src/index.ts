import { EventType } from 'overmind'

let nextComponentId = 0

export const createConnect = (overmind) => (options) => {
  const componentId = nextComponentId++
  let componentInstanceId = 0

  return {
    ...options,
    mixins: (options.mixins ? options.mixins : []).concat({
      beforeMount(this: any) {
        this.__tree = (overmind as any).proxyStateTree.getTrackStateTree()
        this.__componentInstanceId = componentInstanceId++
        this.__onUpdate = (mutations, paths, flushId) => {
          this.__currentFlushId = flushId
          this.$forceUpdate()
        }
        this.overmind = {
          state: this.__tree.state,
          actions: overmind.actions,
          effects: overmind.effects,
          addMutationListener: overmind.addMutationListener,
        }
        this.__tree.track(this.__onUpdate)
      },
      beforeUpdate(this: any) {
        this.__tree.track(this.__onUpdate)
      },
      mounted(this: any) {
        overmind.eventHub.emitAsync(EventType.COMPONENT_ADD, {
          componentId,
          componentInstanceId: this.__componentInstanceId,
          name: options.name || this.name || '',
          paths: Array.from(this.__tree.pathDependencies) as any,
        })
      },
      updated(this: any) {
        overmind.eventHub.emitAsync(EventType.COMPONENT_UPDATE, {
          componentId,
          componentInstanceId: this.__componentInstanceId,
          name: options.name || this.name || '',
          flushId: this.__currentFlushId,
          paths: Array.from(this.__tree.pathDependencies) as any,
        })
      },
      beforeDestroy(this: any) {
        overmind.eventHub.emitAsync(EventType.COMPONENT_REMOVE, {
          componentId,
          componentInstanceId: this.__componentInstanceId,
          name: options.name || this.name || '',
        })

        // @ts-ignore
        overmind.proxyStateTree.disposeTree(this.__tree)
      },
    }),
    overmind,
  } as any
}
